language: csharp

# Use container-based infrastructure with Ubuntu Trusty (14.04)
os: linux
dist: trusty
sudo: required

# TODO : Enable both mono and dotnet builds: https://docs.travis-ci.com/user/languages/csharp/#Testing-Against-Mono-and-.NET-Core
mono:
  - latest

matrix:
  include:
    - dotnet: 2.0.0
      env: 
        - DOTNETLIBFW=netstandard2.0
        - DOTNETFW=netcoreapp2.0
        - MONO_BASE_PATH=/usr/lib/mono/
    - dotnet: 1.1.0
      env:  
        - DOTNETLIBFW=netstandard1.6
        - DOTNETFW=netcoreapp1.1
        - MONO_BASE_PATH=/usr/lib/mono/

install:
  - dotnet restore

# TODO : Add before_script section to clone fsharp/fsharp repo and compile it, so fsc-proto can be used.
#        Cache the compiled fsharp build (using travis CI caching functionality) so it doesn't have to run every time.
# TODO : Use build matrix to run two jobs; one where we build/test via the solution, and another where we build through proto-compile
#        https://docs.travis-ci.com/user/customizing-the-build/#Explicitly-Including-Jobs

script:
  - dotnet build ExtCore/ExtCore.fsproj --framework $DOTNETLIBFW
  - FrameworkPathOverride=$MONO_BASE_PATH/4.5-api/ dotnet build ExtCore/ExtCore.fsproj --framework "net45"
  - dotnet test ExtCore.Tests/ExtCore.Tests.fsproj --framework $DOTNETFW
#  - FrameworkPathOverride=$MONO_BASE_PATH/4.5-api/ dotnet test ExtCore.Tests/ExtCore.Tests.fsproj --framework "net45"
# Workaround for dotnet test on net45:
  - FrameworkPathOverride=$MONO_BASE_PATH/4.5-api/ dotnet build ExtCore.Tests/ExtCore.Tests.fsproj --framework "net45"
  - nuget install NUnit.ConsoleRunner -Version 3.7.0 -OutputDirectory $PWD/packages
  - mono packages/NUnit.ConsoleRunner.3.7.0/tools/nunit3-console.exe ExtCore.Tests/bin/Debug/net45/ExtCore.Tests.dll

